
# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields,osv --- <8.0.X
from odoo import api, fields, models
from odoo.exceptions import ValidationError
from datetime import date, datetime,timedelta
#from odoo.addons.jasper_reports import jasper_report
#from odoo import pooler
from datetime import  datetime
from time import time
formatter_string = "%d-%m-%y" 
#from tools.translate import_
#from odoo import tools
import sys
#reload(sys)
#sys.setdefaultencoding("utf-8")
#Importamos la libreria logger
import logging
#Definimos la Variable Global
_logger = logging.getLogger(__name__)



class grupo_bien(models.Model):
    """Contiene la Informacion sobre los Grupos de Bienes"""
    _name = 'grupo_bien'
    #_rec_name = 'grupo_bien_codigo'
    _rec_name = 'grupo_bien_nombre'
    #_rec_name = 'grupo_bien_partidapre'
   
    grupo_bien_codigo = fields.Char(string='Codigo del Grupo',size=3,
                        help='Registra el Codigo del Grupo', 
                         default='New')
        #grupo_bien_codigo = fields.Char(string='Codigo del Grupo',size=3,help='Registra el Codigo del Grupo')
    grupo_bien_nombre = fields.Char(string='Nombre del Grupo',size=100,required=True, help='Registra el Nombre del Grupo')
    grupo_bien_partidapre = fields.Char(string='Partida Presupuestaria', size=14, help='Registra la Partida Presupuestaria')

    _sql_constraints = [('grupo_bien_nombre', 'unique(grupo_bien_nombre)', 'El Nombre debe se Ãºnico!')]    



   
    @api.model  
    def create(self,vals):
        if vals.get('grupo_bien_codigo', 'New') == 'New' or '':
            vals['grupo_bien_codigo'] = self.env['ir.sequence'].next_by_code(
            'self.grupo_bien_codigo') or 'New'
          
        result = super(grupo_bien, self).create(vals)
        return result 


       # new_id = super(grupo_bien, self).create(vals)
       # return new_id


    # def create(self, vals):
    #     if vals.get('grupo_bien_codigo', 'New') == 'New':
    #             vals['grupo_bien_codigo'] = self.env['ir.sequence'].next_by_code('grupo_bien.grupo_bien_codigo')       

    #     result = super(grupo_bien, self).create(vals)       

    #     return result




    #@api.multi
    #def create_secuencia(self):
    #    seq = self.env['ir.sequence'].next_by_code('grupo_bien_id_seq')
    #    print seq
        #self.grupo_bien_codigo = chr(seq)
        
       # return super(grupo_bien, self).create(vals)
  

#self.grupo_bien_codigo =  self.env['ir.sequence'].next_by_code('grupo_bien.grupo_bien_codigo')


