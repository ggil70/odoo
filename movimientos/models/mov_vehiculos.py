# -*- coding: utf-8 -*-
##############################################################################
#
#    odoo, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the Odoo plugin for Dia !
#from odoo.osv import fields, osv, orm

from odoo import api, fields, models, tools, _
from odoo.exceptions import ValidationError
from odoo.osv import expression


#Importamos la libreria logger
import logging
#Definimos la Variable Global
#_logger = logging.getLogger(__name__)  
global res, cod_movi
#res = 0

#****************Detalle de los  Movimientos*******************#

class vehiculos_mov_deta_rel(models.Model):
        #_inherit ='bienes'
        """Registra el detalle de los movimientos"""
        _name = 'vehiculos_mov_deta_rel'
        _rec_name = 'bienes_id'
        #global res
        #res = ()
        movimiento_id = fields.Many2one('mov_vehiculos','Nombre del Movimiento', help='Registra el codigo de Vinculacion con los Tipos de Movimientos ')
        bienes_id = fields.Many2one('vehiculos','Numero del Bien', help='Registra el Numero de Bien')
        bi_nombre = fields.Text('Descripcion del Bien', help='Descripcion del Bien', compute="generar_bien", store=True)
        bi_placas = fields.Char('Placa del Vehículo',compute="generar_bien", help='Registra Numero de La placa del Vehículo', store=True)
        bi_fecha_inv = fields.Date('Fecha del Ultimo Movimiento del Bien',compute="generar_bien", store=True) 
        bi_bienes_sedes_id  = fields.Many2one('sedes',string='Sedes del Ministerio',  compute="generar_bien", help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
        bi_bienes_regiones_id  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede', compute="generar_bien",size=3, help='Regiones de Ubicación de la Sede')    
        bi_oficina_cedente = fields.Many2one('oficinas','Oficina Cedente',compute="generar_bien", store=True)
        bi_resp_uso_cedente = fields.Many2one('personas','Responsable de Uso Cedente',compute="generar_bien", store=True)
        bi_oficina_cedenteipo_estatus_inventario_id = fields.Many2one('tipo_estatus_inventario','Estatus de Inventario del Bien')


        _sql_constraints = [('vehiculos_mov_deta_ids', 'UNIQUE(movimiento_id,bienes_id)', 'El bien ya esta registrado en este movimiento!')] 

        @api.onchange('movimiento_id.fecha_mov')
        def validar_fecha(self):
           if  self.movimiento_id.fecha_mov < self.bi_fecha_inv:
                raise ValidationError (
                    "Error ! No puedes crear registros en donde la fecha del movimiento %s sea menor a la fecha del inventario" % (self.fecha_mov)
                )
  
        
  


        @api.onchange('bienes_id')
        def generar_bien(self): 
            self.bi_nombre = self.bienes_id.bienes_nombre
            self.bi_bienes_regiones_id  = self.bienes_id.bienes_regiones_id
            self.bi_bienes_sedes_id = self.bienes_id.bienes_sedes_id
            self.bi_oficina_cedente = self.bienes_id.oficinas_id
            self.bi_resp_uso_cedente  = self.bienes_id.resp_uso_id
            self.bi_fecha_inv = self.bienes_id.fech_inventario
            self.bi_placas = self.bienes_id.placas
            self.bi_tipo_estatus_inventario_id = self.bienes_id.tipo_estatus_inventario_id

 
######################################################################


                



class mov_vehiculos(models.Model):
    #_inherit ='bienes'
    """Registra los movimientos"""
    _name = 'mov_vehiculos'
    _rec_name = 'tipo_movimiento_id'
    tipo_movimiento_id = fields.Many2one('tipo_movimiento','Nombre del Movimiento',required=True, help='Registra el codigo de Vinculacion con los Tipos de Movimientos ')
    movimiento_codigo = fields.Char(string='Codigo del Movimiento', compute="compute_generar_codigo", store=True)
    bienes_regiones_id_receptora  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede Receptora',size=3, help='Registrar La Región de Ubicación de la Sede Receptora')    
    bienes_sedes_id_receptora  = fields.Many2one('sedes',string='Sedes Receptora', domain="[('regiones_id','=',bienes_regiones_id_receptora)]",help='Registra el Codigo de Vinculacion con la Sede Receptora')
    ofi_receptora = fields.Many2one('oficinas','Oficina Receptora',size=2, domain="[('sedes_id','=',bienes_sedes_id_receptora)]", help='Registra la Oficina Receptora del Bien')
    resp_uso_receptor = fields.Many2one('personas','Responsable de uso Receptor',domain="[('oficinas_id','=',ofi_receptora)]",help='Registra el Responsable de uso Cedente del Bien')
    fecha_mov = fields.Date(string='Fecha del Movimiento',size=8,required=True, help='Registra la Fecha del Movimiento')    
    analista_bienes = fields.Many2one('personas','Analista de Bienes',domain="['&',('oficinas_id','=',1),('active','=',True)]",required=True, help='Registra el Analista que realizo el Movimiento')
    nro_acta = fields.Text('Acta del Movimiento',help='Registra Acta del Movimiento')
    fecha_acta = fields.Date(string='Fecha del Acta',help='Registra la Fecha del Acta del Movimiento')
    ente_externo_id = fields.Many2one('ente_externo','Ente Externo',help='Registra el codigo de Vinculacion con los Entes Externos')
    observacion = fields.Text('Observacion', help='Observaciones')
    state = fields.Selection([('1','Registrado'),('2','Realizar Movimiento'),('3','Movimiento Realizado ')],'Estado')
    #bi_oficina_cedente = fields.Many2one('oficinas','Oficina Cedente', default = lambda self: self.env.user.oficinas_id)
    bienes_regiones_id_cedente  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede Cedente',size=3, help='Registra La Región de Ubicación de la Sede Cedente')    
    bienes_sedes_id_cedente  = fields.Many2one('sedes',string='Sedes Cedente', domain="[('regiones_id','=',bienes_regiones_id_cedente)]",help='Registra el Codigo de Vinculacion con las Sedes Cedente')
    oficina_cedente = fields.Many2one('oficinas','Oficina Cedente',domain="[('sedes_id','=',bienes_sedes_id_cedente)]")
    bienes_resp_uso_cedente = fields.Many2one('personas','Responsable de Uso Cedente', domain="[('oficinas_id','=', oficina_cedente)]")

    #bienes_mov_deta_ids = fields.on23y2many('bienes','bienes_mov_deta_rel','bienes_id', 'movimiento_id', help='Registra el Numero de Bien')
    vehiculos_mov_deta_ids = fields.One2many('vehiculos_mov_deta_rel','movimiento_id', string="Vehículos", help='Registra el Numero de Bien')
    
    _defaults = { 
        'state': '1',
       
     #   'analista_bienes': 66
         }

      
    
    
    def solicitar(self):
        if self.state == '1':
              self.state = '2' # Actualizamos values
            
    
    @api.depends('tipo_movimiento_id')
    def compute_generar_codigo(self): 
        self.movimiento_codigo = self.tipo_movimiento_id.cod_mov
    


    
    # @api.one 
    # @api.depends('bi_oficina_cedente')
    # def validar_oficina_cedente(self):
    #    if self.ofi_receptora:
    #         if  self.bi_oficina_cedente == self.ofi_receptora:
    #              raise ValidationError (
    #             "Error ! La Oficina Cedente es igual a la Receptora " 
    #             )


   
    def mover(self):
        if self.vehiculos_mov_deta_ids:
                self.state = '3'
                if self.movimiento_codigo == '01':
                   cod_movi = '21'
                   estatus = self.env['tipo_estatus_inventario'].search([('cod_estatus', '=', cod_movi)])

                if self.movimiento_codigo == '02':
                   cod_movi = '11'     
                   estatus = self.env['tipo_estatus_inventario'].search([('cod_estatus', '=', cod_movi)])             


                if  self.movimiento_codigo <'04':

                    for bien in self.vehiculos_mov_deta_ids:
                        bien.bienes_regiones_id = self.bienes_regiones_id_receptora
                        bien.bienes_sedes_id  = self.bienes_sedes_id_receptora
                        bien.bienes_id.oficinas_id = self.ofi_receptora
                        bien.bienes_id.resp_uso_id = self.resp_uso_receptor
                        bien.bienes_id.fech_inventario = self.fecha_mov
                        bien.bienes_id.tipo_estatus_inventario = estatus

                else:       
                     for bien in self.vehiculos_mov_deta_ids:
                        bien.bienes_id.sw_desin= True
                        bien.bienes_id.fech_inventario = self.fecha_mov
                        bien.bienes_id.tipo_estatus_inventario = estatus

        else:
            raise ValidationError('El campo \"Bienes\" esta Vacio')





