# -*- coding: utf-8 -*-
##############################################################################
#
#    odoo, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the Odoo plugin for Dia !
#from odoo.osv import fields, osv, orm

from odoo import api, fields, models, tools, _
from odoo.exceptions import ValidationError
from odoo.osv import expression


#Importamos la libreria logger
import logging
#Definimos la Variable Global
#_logger = logging.getLogger(__name__)  
global res, cod_movi, estatus
#res = 0


#****************Tipos de Movimientos*******************#
class tipo_movimiento(models.Model):
    """Registra los Tipos movimientos de bienes"""
    _name = 'tipo_movimiento'
    _rec_name = 'nom_mov'
    nom_mov = fields.Char('Nombre del Movimiento',size=100,required=True, help='Registra el Nombre del Movimiento')
    cod_mov = fields.Char('Codigo del Movimiento',size=100,required=True, help='Registra el Codigo del Movimiento ')
    sw_desin = fields.Boolean ('Desincorporado', help='Registra si el bien fue Desincorporado')
    _sql_constraints = [('nom_mov', 'unique(nom_mov)', 'El Nombre del Movimiento debe ser Unico!')]  



#****************Enten Externos a quien se le Envian Bienes*******************#

class ente_externo(models.Model):
    """Registra los Entes Externos"""
    _name = 'ente_externo'
    _rec_name = 'ente_externo_nombre'
    ente_externo_rif = fields.Char('Rif' ,required=True,help='Registra el Rif del Ente Externo')
    ente_externo_cedula = fields.Char('Cedula del Funcionario Responsable' ,required=True, help='Registra la Cedula  Funcionario Responsable del Ente Externo')
    ente_externo_nombre = fields.Char('Nombre del Ente Externo',size=200,required=True, help='Registra el Nombre del Ente Externo')
    ente_externo_funcionario = fields.Char('Nombre del Funcionario Responsable',size=200,required=True, help='Registra el Nombre del Funcionario Responsable del Ente Externo')
    ente_externo_telf   = fields.Char('Telefono del Funcionario Responsable',size=100,required=True, help='Registra el Numero de telefono del Funcionario Responsabledel Ente Externo')
    ente_externo_correo = fields.Char('Correo del Funcionario Responsable',size=200,required=True, help='Registra el Correo del Funcionario Responsable del Ente Externo')
    _sql_constraints = [('ente_externo_nombre', 'unique(ente_externo_nombre)', 'El Ente Externo ya esta Registrado!')] 



class verificar_id_movimiento(models.Model):
    """Registra los Entes Externos"""
    _name = 'verificar_id_movimiento'
    #_rec_name = 'ente_externo_nombre'
    usuario_movi_id = fields.Integer('Usuario' ,required=True)
    oficina_cede = fields.Integer('Oficina' ,required=True)
    activo_oficina = fields.Integer('Activo_oficina' ,required=True, default=1)




#****************Detalle de los  Movimientos*******************#






class bienes_mov_deta_rel(models.Model):
        #_inherit ='bienes'
        """Registra el detalle de los movimientos"""
        _name = 'bienes_mov_deta_rel'
        _rec_name = 'bienes_id'
        #global res
        #res = ()
        movimiento_id = fields.Many2one('movimientos','Nombre del Movimiento', help='Registra el codigo de Vinculacion con los Tipos de Movimientos ',
                        required=True, deleted="cascade")
        bi_bienes_sedes_id  = fields.Many2one('sedes','Sedes', compute="generar_bien", help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
        bi_bienes_regiones_id  = fields.Many2one('regiones','Regiones',size=3, help='Regiones de Ubicación de la Sede')    
        bi_oficina_cedente = fields.Many2one('oficinas','Oficina Cedente',  compute="generar_bien", store=True)
        bi_resp_uso_cedente = fields.Many2one('personas','Responsable de Uso Cedente',compute="generar_bien", store=True)
        
        
        bienes_id = fields.Many2one('bienes','Numero del Bien', help='Registra el Numero de Bien')

        bi_nombre = fields.Text('Descripcion del Bien', help='Descripcion del Bien', compute="generar_bien", store=True)
        bi_serial = fields.Char('Serial del Bien',compute="generar_bien", help='Registra el Numero de Serial del Bien Nacional', store=True)
        bi_fecha_inv = fields.Date('Fecha del Ultimo Movimiento del Bien',compute="generar_bien", store=True) 
        bi_tipo_estatus_inventario_id = fields.Many2one('tipo_estatus_inventario','Estatus de Inventario del Bien')


        _sql_constraints = [('bienes_mov_deta_ids', 'UNIQUE(movimiento_id,bienes_id)', 'El bien ya esta registrado en este movimiento!')] 

      
        @api.model
        def default_get(self, fields_list):
            res = super(bienes_mov_deta_rel, self).default_get(fields_list)
            
            return res
             
      
        @api.onchange('movimiento_id.fecha_mov')
        def validar_fecha(self):
           if  self.movimiento_id.fecha_mov < self.bi_fecha_inv:
                raise ValidationError (
                    "Error ! No puedes crear registros en donde la fecha del movimiento %s sea menor a la fecha del inventario" % (self.fecha_mov)
                )

        


        @api.onchange('bienes_id')
        def generar_bien(self):
            if self.bienes_id:
                domain = [('usuario_movi_id','=',self.env.user.id),('activo_oficina','=',1)]
                recordset= self.env['verificar_id_movimiento'].search(domain)
                nro = len(recordset)
                oficina = 0
                if nro > 0:
                    for registro in recordset:
                        oficina = registro.oficina_cede
                
                    domain_aux = [('bienes_numbien','=',self.bienes_id.bienes_numbien)]
                    recordset_aux= self.env['bienes'].search(domain_aux)
                    nro_aux = len(recordset_aux)
                    if nro_aux > 0:
                        oficina_bien = 0
                        for registro_aux in recordset_aux:
                            oficina_bien = registro_aux.bienes_oficinas_id.id
                            oficina_nombre_bien = registro_aux.bienes_oficinas_id.oficinas_nombre
                            nro_bien = registro_aux.bienes_numbien
                            nombre = registro_aux.bienes_nombre
                            
                            
                        if oficina_bien == oficina:  
                            self.bi_nombre = self.bienes_id.bienes_nombre
                            self.bi_bienes_regiones_id  = self.bienes_id.bienes_regiones_id
                            self.bi_bienes_sedes_id = self.bienes_id.bienes_sedes_id
                            self.bi_oficina_cedente = self.bienes_id.bienes_oficinas_id
                            self.bi_resp_uso_cedente  = self.bienes_id.resp_uso_id
                            self.bi_serial = self.bienes_id.bienes_serial
                            self.bi_fecha_inv =  self.bienes_id.fech_inventario
                            self.bi_tipo_estatus_inventario_id = self.bienes_id.tipo_estatus_inventario_id
                        else:
                            raise ValidationError("El Bien ["+ str(nro_bien) + "] [" + str(nombre) + "] esta asociado a la oficina [" + str(oficina_nombre_bien) + "] la cual es diferente a la Oficina cedente Seleccionada.")   
                
                
    












class movimientos(models.Model):
    #_inherit ='bienes'
    """Registra los movimientos"""
    _name = 'movimientos'
    _rec_name = 'tipo_movimiento_id'
    tipo_movimiento_id = fields.Many2one('tipo_movimiento','Tipo del Movimiento',required=True, 
                                          default=1,  help='Registra el codigo de Vinculacion con los Tipos de Movimientos ')
    categoria_movimiento_id = fields.Selection([('01','Inventario Inicial'),('02','Reasignación'),('03','Desincorporación')],'Categoria Movimiento',
                                                default="02")
    movimiento_codigo = fields.Char(string='Codigo del Movimiento', compute="compute_generar_codigo", store=True, default="01")
    bienes_regiones_id_receptora  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede Receptora',size=3, required=True, 
                                    help='Registra La Región de Ubicación de la Sede Receptora')  
    
    bienes_regiones_codigo_receptora = fields.Char(string='Código de la Región',size=3,required=True, help='Registra el Código de la Región')                               

    bienes_sedes_id_receptora  = fields.Many2one('sedes',string='Sedes Receptora', domain="[('regiones_id','=',bienes_regiones_id_receptora)]",
                                    required=True, help='Registra el Codigo de Vinculacion con las Sede Receptora')
    bienes_sedes_codigo_receptora = fields.Char(string='Código de la Sede',size=7,required=True, help='Registra el Código de la Sede')                               
    
    ofi_receptora = fields.Many2one('oficinas','Oficina Receptora',size=2, help='Registra la Oficina Receptora del Bien',
                                     domain="[('sedes_id','=',bienes_sedes_id_receptora)]",required=True)
    
    ofi_codigo_receptora = fields.Char(string='Nomenclatura de la Oficina',size=20,required=True, help='Registra la Nomenclatura de la Oficina')    
                                      
    resp_uso_receptor = fields.Many2one('personas','Responsable de uso Receptor',domain="[('personas_oficinas_id','=',ofi_receptora)]",
                                     help='Registra el Responsable de uso Cedente del Bien')

    cedu_resp_uso_receptor = fields.Integer(string='Cédula del Responsable de Uso',size=10,required=True, help='Registra la Cedula de la persona')
                                    
                                    
    ubica_id_receptor = fields.Many2one('ubicacion_fisica', 'Ubicacion Fisica del Bien', size=3, help='Registra la Ubicación Física del Bien')                                 
    ubica_codigo_receptor = fields.Char(string='Codigo de la Ubicacion Física',
                    size=3, help='Registra el Codigo de la Ubicacion Física (Interno)')
    piso_receptor = fields.Integer('Num. de Piso ',size=2, help='Registra el Piso donde se encuentra el Bien')                
                                     
                                     
    fecha_mov = fields.Date(string='Fecha del Movimiento',size=8, help='Registra la Fecha del Movimiento', required=True)    
    analista_bienes = fields.Many2one('personas','Analista de Bienes',domain="['&',('personas_oficinas_id','=',1),('active','=',True)]", 
                                       required=True, help='Registra el Analista que realizo el Movimiento')
    nro_acta = fields.Text('Acta del Movimiento',help='Registra Acta del Movimiento')
    fecha_acta = fields.Date(string='Fecha del Acta',help='Registra la Fecha del Acta del Movimiento')
    ente_externo_id = fields.Many2one('ente_externo','Ente Externo',help='Registra el codigo de Vinculacion con los Entes Externos')
    observacion = fields.Text('Observacion', help='Observaciones')
    state = fields.Selection([('1','Registrado'),('2','Realizar Movimiento'),('3','Movimiento Realizado ')],'Estado', default = '1')
    bienes_regiones_id_cedente  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede Cedente',size=3, help='Registra La Región de Ubicación de la Sede Cedente')    
    bienes_sedes_id_cedente  = fields.Many2one('sedes',string='Sedes Cedente', domain="[('regiones_id','=',bienes_regiones_id_cedente)]",help='Registra el Codigo de Vinculacion con la Sede Cedente')
    oficina_cedente = fields.Many2one('oficinas','Oficina Cedente',domain="[('sedes_id','=',bienes_sedes_id_cedente)]")
    bienes_resp_uso_cedente = fields.Many2one('personas','Responsable de Uso Cedente', domain="[('personas_oficinas_id','=', oficina_cedente)]")
    bienes_mov_deta_ids = fields.One2many('bienes_mov_deta_rel','movimiento_id', string="Bienes", deleted="cascade",
                          help='Registra el Numero de Bien', required=True)

    @api.onchange('bienes_regiones_id_receptora')
    def onchange_bienes_regiones_id_receptora(self):
        codigor= ''
        codigor = self.bienes_regiones_id_receptora.regiones_codigo
        self.bienes_regiones_codigo_receptora =  codigor


    @api.onchange('bienes_sedes_id_receptora')
    def onchange_bienes_sedes_id_receptora(self):
        codigor= ''
        codigor = self.bienes_sedes_id_receptora.sedes_codigo
        self.bienes_sedes_codigo_receptora =  codigor

    @api.onchange('ofi_receptora')
    def onchange_ofi_receptora(self):
        codigor= ''
        codigor = self.ofi_receptora.oficinas_codigo
        self.ofi_codigo_receptora =  codigor

    @api.onchange('resp_uso_receptor')
    def onchange_resp_uso_receptor(self):
        codigor= ''
        codigor = self.resp_uso_receptor.personas_cedula
        self.cedu_resp_uso_receptor =  codigor

    @api.onchange('ubica_id_receptor')
    def onchange_ubica_id_receptor(self):
        codigor= ''
        codigor = self.ubica_id_receptor.ubicacion_fisica_codigo
        self.ubica_codigo_receptor =  codigor
   
    @api.model
    def create(self, value):
        rec = super(movimientos, self).create(value)
        rec['state']='2'
        return rec
    



    @api.onchange('oficina_cedente')
    def onchange_oficina_cedente(self):
        if self.oficina_cedente.id:
            #Verificar que no se encuentre ya y este activa
            oficina = self.oficina_cedente.id
            domain = [('usuario_movi_id','=',self.env.user.id),('oficina_cede','=',oficina)]            
            recordset= self.env['verificar_id_movimiento'].search(domain)
            nro = len(recordset)
            
            domain = [('usuario_movi_id','=',self.env.user.id)]            
            recordset_aux= self.env['verificar_id_movimiento'].search(domain)
            for registro_aux in recordset_aux:
                registro_aux.write({'activo_oficina':0})
                
            if nro == 1:
                for registro in recordset:    
                    registro.write({'activo_oficina':1})
            else:    
                diccionario = {'usuario_movi_id':self.env.user.id, 'oficina_cede':oficina}
                registro = self.env['verificar_id_movimiento'].create(diccionario)                         



   
    def mover(self):
        if self.bienes_mov_deta_ids:
            self.state = '3'
            #actualizar bienes
            for registro in self.bienes_mov_deta_ids:
                domain = [('id','=',registro.bienes_id.id)]            
                recordset_aux= self.env['bienes'].search(domain)
                for registro_aux in recordset_aux:
                    registro_aux.write({'bienes_ubica_id':self.ubica_id_receptor,
                                        'ubicacion_fisica_codigo':self.ubica_codigo_receptor,
                                        'bienes_piso':self.piso_receptor,
                                        'fech_inventario':self.fecha_mov,
                                        'tipo_estatus_inventario_id':2,
                                        'cod_estatus':'02',
                                        'bienes_regiones_id':self.bienes_regiones_id_receptora,
                                        'bienes_regiones_codigo':self.bienes_regiones_codigo_receptora,
                                        'bienes_sedes_id':self.bienes_sedes_id_receptora,
                                        'bienes_sedes_codigo':self.bienes_sedes_codigo_receptora,
                                        'bienes_oficinas_id':self.ofi_receptora,
                                        'bienes_oficinas_codigo':self.ofi_codigo_receptora,
                                        'resp_uso_id':self.ofi_codigo_receptora,
                                        'cedu_resp_uso':self.cedu_resp_uso_receptor,
                                     
                    })
            return True                        
        else:
            raise ValidationError('No existen Bienes asociados al movimiento para der reasignado')











































































   


   

 



